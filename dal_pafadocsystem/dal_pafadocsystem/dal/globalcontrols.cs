using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Web.UI;
using System.Net;
using System.Net.Mail;
using System.Data;
using System.Data.OleDb;
using System.Net.Security;
using System.Security.Cryptography.X509Certificates;

using NSDataAccess;
using NSApplication;
using System.Security.Cryptography;

namespace globalcontrols
{
    public static class gc_app
    {
        
        static DataAccess dal;
        static DataTable mdt;
        static OleDbParameter param;
        static List<OleDbParameter> li_param;
        static bluniapplication objuniappl;

        static string _filelocat;
        static string _dfilelocat;
        static string filelocat
        {
            get{return _filelocat;}
            set{_filelocat=value;}
        }
        static string dfilelocat
        {
            get { return _dfilelocat; }
            set { _dfilelocat = value; }
        }

        public static string vw_filelocation(string folder_name)
        {
            dal = new DataAccess();
            li_param = new List<OleDbParameter>();
            dal.sqlcmdstr = "select * from general.tblfilelocation where foldername=?";

            param = new OleDbParameter("@folder_name", OleDbType.VarChar, 500);
            param.Value = folder_name;
            li_param.Add(param);

            dal.lparam = li_param;

            mdt = dal.view(Clsutility.dbcon.dbcnn_master.ToString());

            filelocat = mdt.Rows[0]["filelocat"].ToString();

            return filelocat;
        }

        public static DataTable vw_day()
        {
            dal = new DataAccess();
            
            dal.sqlcmdstr = "select * from general.tblday order by [order]";

            mdt = dal.view(Clsutility.dbcon.dbcnn_master.ToString());

            return mdt;
        }

        public static DataTable vw_month()
        {
            dal = new DataAccess();

            dal.sqlcmdstr = "select * from general.tblmonth order by [order]";

            mdt = dal.view(Clsutility.dbcon.dbcnn_master.ToString());

            return mdt;
        }

        public static string vw_dfilelocation(string folder_name)
        {

            dal.sqlcmdstr = "select * from general.tblfilelocation where foldername=?";

            param = new OleDbParameter("@folder_name", OleDbType.VarChar, 500);
            param.Value = folder_name;
            li_param.Add(param);

            dal.lparam = li_param;

            mdt = dal.view(Clsutility.dbcon.dbcnn_master.ToString());

            dfilelocat = mdt.Rows[0]["dfilelocat"].ToString();

            return dfilelocat;
        }

        public static void message(Page webPageInstance,string msg)
        {
            webPageInstance.ClientScript.RegisterStartupScript(webPageInstance.GetType(), "scriptkey", "<script>alert('" + msg + "');</script>");
        }

        public static void sendmail(string to,string subject,string body)
        {
            MailAddress mailfrom;
            MailAddress mailto;
            MailMessage MailMessage;
            SmtpClient smtp;
            //to = "samit@lincoln.edu.my";
            mailto = new MailAddress(to);
            mailfrom = new MailAddress("autogenerated@lincoln.edu.my");
            MailMessage = new MailMessage(mailfrom, mailto);
            MailMessage.Subject = subject;
            MailMessage.Body = body;
            MailMessage.IsBodyHtml = true;
            smtp = new SmtpClient();
            smtp.Host = "pod51003.outlook.com";
            smtp.Port = 587;
            smtp.UseDefaultCredentials = false;
            smtp.EnableSsl = true;
            smtp.Credentials = new NetworkCredential("autogenerated@lincoln.edu.my", "HIBISCUS@ML$2012");
            smtp.EnableSsl = true;
            smtp.Send(MailMessage);
        }

        public static void sendmail(string to, string subject, string body, List<Attachment> attach_li)
        {

            MailMessage mail = new MailMessage();
            SmtpClient SmtpServer = new SmtpClient("pod51003.outlook.com");

            mail.From = new MailAddress("autogenerated@lincoln.edu.my");
            mail.To.Add(to);
            mail.Subject = subject;
            mail.Body = body;
            mail.IsBodyHtml = true;

            foreach (Attachment attach in attach_li)
                mail.Attachments.Add(attach);

            SmtpServer = new SmtpClient();
            SmtpServer.Host = "pod51003.outlook.com";
            SmtpServer.Port = 587;
            SmtpServer.UseDefaultCredentials = false;
            SmtpServer.EnableSsl = true;
            ServicePointManager.ServerCertificateValidationCallback = delegate (object s, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors) { return true; };
            SmtpServer.Credentials = new NetworkCredential("autogenerated@lincoln.edu.my", "HIBISCUS@ML$2012");

            SmtpServer.Send(mail);
        }

        public static void sendmail(string to, string subject, string body, List<string> mailcc, List<string> mailbcc, List<Attachment> attach_li)
        {

            MailMessage mail = new MailMessage();
            SmtpClient SmtpServer = new SmtpClient("pod51003.outlook.com");

            mail.From = new MailAddress("autogenerated@lincoln.edu.my");
            mail.To.Add(to);
            mail.Subject = subject;
            mail.Body = body;
            mail.IsBodyHtml = true;

            foreach (string cc in mailcc)
                mail.CC.Add(cc);

            foreach (string bcc in mailbcc)
                mail.Bcc.Add(bcc);

            foreach (Attachment attach in attach_li)
                mail.Attachments.Add(attach);

            SmtpServer = new SmtpClient();
            SmtpServer.Host = "pod51003.outlook.com";
            SmtpServer.Port = 587;
            SmtpServer.UseDefaultCredentials = false;
            SmtpServer.EnableSsl = true;
            ServicePointManager.ServerCertificateValidationCallback = delegate (object s, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors) { return true; };
            SmtpServer.Credentials = new NetworkCredential("autogenerated@lincoln.edu.my", "HIBISCUS@ML$2012");

            SmtpServer.Send(mail);
        }

        public static void sendmailcc(string to, string subject, string body, List<string> mailcc, List<Attachment> attach_li)
        {

            MailMessage mail = new MailMessage();
            SmtpClient SmtpServer = new SmtpClient("pod51003.outlook.com");

            mail.From = new MailAddress("autogenerated@lincoln.edu.my");
            mail.To.Add(to);
            mail.Subject = subject;
            mail.Body = body;
            mail.IsBodyHtml = true;

            foreach (string cc in mailcc)
                mail.CC.Add(cc);

            foreach (Attachment attach in attach_li)
                mail.Attachments.Add(attach);

            SmtpServer = new SmtpClient();
            SmtpServer.Host = "pod51003.outlook.com";
            SmtpServer.Port = 587;
            SmtpServer.UseDefaultCredentials = false;
            SmtpServer.EnableSsl = true;
            ServicePointManager.ServerCertificateValidationCallback = delegate (object s, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors) { return true; };
            SmtpServer.Credentials = new NetworkCredential("autogenerated@lincoln.edu.my", "HIBISCUS@ML$2012");

            SmtpServer.Send(mail);
        }

        public static void sendmail(string to, string subject, string body, List<string> mailcc, List<string> mailbcc)
        {
            MailMessage mail = new MailMessage();
            SmtpClient SmtpServer = new SmtpClient("pod51003.outlook.com");

            mail.From = new MailAddress("autogenerated@lincoln.edu.my");
            mail.To.Add(to);

            foreach (string cc in mailcc)
                mail.CC.Add(cc);

            foreach (string bcc in mailbcc)
                mail.Bcc.Add(bcc);

            mail.Subject = subject;
            mail.Body = body;
            mail.IsBodyHtml = true;
            SmtpServer = new SmtpClient();
            SmtpServer.Host = "pod51003.outlook.com";
            SmtpServer.Port = 587;
            SmtpServer.UseDefaultCredentials = false;
            SmtpServer.EnableSsl = true;
            ServicePointManager.ServerCertificateValidationCallback = delegate (object s, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors) { return true; };
            SmtpServer.Credentials = new NetworkCredential("autogenerated@lincoln.edu.my", "HIBISCUS@ML$2012");

            SmtpServer.Send(mail);
        }

        public static void sendmailcc(string to, string subject, string body, List<string> mailcc)
        {
            MailMessage mail = new MailMessage();
            SmtpClient SmtpServer = new SmtpClient("pod51003.outlook.com");

            mail.From = new MailAddress("autogenerated@lincoln.edu.my");
            mail.To.Add(to);

            foreach (string cc in mailcc)
                mail.CC.Add(cc);

            mail.Subject = subject;
            mail.Body = body;
            mail.IsBodyHtml = true;
            SmtpServer = new SmtpClient();
            SmtpServer.Host = "pod51003.outlook.com";
            SmtpServer.Port = 587;
            SmtpServer.UseDefaultCredentials = false;
            SmtpServer.EnableSsl = true;
            ServicePointManager.ServerCertificateValidationCallback = delegate (object s, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors) { return true; };
            SmtpServer.Credentials = new NetworkCredential("autogenerated@lincoln.edu.my", "HIBISCUS@ML$2012");

            SmtpServer.Send(mail);
        }

        public static void sendmailbcc(string to, string subject, string body, List<string> mailbcc)
        {
            MailMessage mail = new MailMessage();
            SmtpClient SmtpServer = new SmtpClient("pod51003.outlook.com");

            mail.From = new MailAddress("autogenerated@lincoln.edu.my");
            mail.To.Add(to);

            foreach (string bcc in mailbcc)
                mail.Bcc.Add(bcc);

            mail.Subject = subject;
            mail.Body = body;
            mail.IsBodyHtml = true;
            SmtpServer = new SmtpClient();
            SmtpServer.Host = "pod51003.outlook.com";
            SmtpServer.Port = 587;
            SmtpServer.UseDefaultCredentials = false;
            SmtpServer.EnableSsl = true;
            ServicePointManager.ServerCertificateValidationCallback = delegate (object s, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors) { return true; };
            SmtpServer.Credentials = new NetworkCredential("autogenerated@lincoln.edu.my", "HIBISCUS@ML$2012");

            SmtpServer.Send(mail);
        }

        public static void sendmailbcc(string to, string subject, string body, List<string> mailbcc, List<Attachment> attach_li)
        {
            MailMessage mail = new MailMessage();
            SmtpClient SmtpServer = new SmtpClient("pod51003.outlook.com");

            mail.From = new MailAddress("autogenerated@lincoln.edu.my");
            mail.To.Add(to);

            foreach (string bcc in mailbcc)
                mail.Bcc.Add(bcc);

            foreach (Attachment attach in attach_li)
                mail.Attachments.Add(attach);

            mail.Subject = subject;
            mail.Body = body;
            mail.IsBodyHtml = true;
            SmtpServer = new SmtpClient();
            SmtpServer.Host = "pod51003.outlook.com";
            SmtpServer.Port = 587;
            SmtpServer.UseDefaultCredentials = false;
            SmtpServer.EnableSsl = true;
            ServicePointManager.ServerCertificateValidationCallback = delegate (object s, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors) { return true; };
            SmtpServer.Credentials = new NetworkCredential("autogenerated@lincoln.edu.my", "HIBISCUS@ML$2012");

            SmtpServer.Send(mail);
        }

        public static DateTime dateformat(string dt)
        {
            if (dt.Contains("-") == true)
                return DateTime.ParseExact(dt, "dd-MM-yyyy", System.Globalization.CultureInfo.InvariantCulture);

            else
                return DateTime.ParseExact(dt, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);

        }

        public static string filetype(string file)
        {
            switch (file)
            {
                case ".txt":
                    return "fa fa-file-text-o";
                case ".zip":
                    return "fa fa-file-archive-o";
                case ".rar":
                    return "fa fa-file-archive-o";
                case ".7z":
                    return "fa fa-file-archive-o";
                case ".pdf":
                    return "fa fa-file-pdf-o";
                case ".doc":
                    return "fa fa-file-word-o";
                case ".docx":
                    return "fa fa-file-word-o";
                case ".xls":
                    return "fa fa-file-excel-o";
                case ".xlsx":
                    return "fa fa-file-excel-o";
                case ".ppt":
                    return "fa fa-file-powerpoint-o";
                case ".pptx":
                    return "fa fa-file-powerpoint-o";
                case ".jpg":
                    return "fa fa-file-photo-o";
                case ".jpeg":
                    return "fa fa-file-photo-o";
                case ".png":
                    return "fa fa-file-photo-o";
                case ".bmp":
                    return "fa fa-file-photo-o";
                case ".tif":
                    return "fa fa-file-photo-o";
                case ".tiff":
                    return "fa fa-file-photo-o";
                case ".svg":
                    return "fa fa-file-photo-o";
                default:
                    return "fa fa-file-o";
            }
        }

        public static List<string> deptcode(string deptid)
        {
            List<string> allinfo = new List<string>();

            switch (deptid)
            {
                case "5F5E1987-1431-4864-9FA2-10934D3A5B4F":
                    {
                        allinfo.Add("FOSAH");
                        allinfo.Add("Faculty of Social Science Arts and Humanities");
                        allinfo.Add("deanfosah@lincoln.edu.my");
                        return allinfo;
                    }
                case "BBB5107D-E0B7-495F-BF24-4A9FC8F73B43":
                    {
                        allinfo.Add("FOAB");
                        allinfo.Add("Faculty of Architecture & Built Environment");
                        allinfo.Add("deanfoab@lincoln.edu.my");
                        return allinfo;
                    }
                case "D01":
                    {
                        allinfo.Add("FON");
                        allinfo.Add("Faculty of Nursing");
                        allinfo.Add("deanfon@lincoln.edu.my");
                        return allinfo;
                    }
                case "D021":
                    {
                        allinfo.Add("FOCSM");
                        allinfo.Add("Faculty of Computer Science and Multimedia");
                        allinfo.Add("deanfocsm@lincoln.edu.my");
                        return allinfo;
                    }
                case "D022":
                    {
                        allinfo.Add("FOHT");
                        allinfo.Add("Faculty of Hospitality and Tourism");
                        allinfo.Add("deanfoab@lincoln.edu.my");
                        return allinfo;
                    }
                case "D023":
                    {
                        allinfo.Add("FOBA");
                        allinfo.Add("Faculty of Business and Accountancy");
                        allinfo.Add("deanfoba@lincoln.edu.my");
                        return allinfo;
                    }
                case "D025":
                    {
                        allinfo.Add("FOE");
                        allinfo.Add("Faculty of Engineering");
                        allinfo.Add("deanfoe@lincoln.edu.my");
                        return allinfo;
                    }
                case "D029":
                    {
                        allinfo.Add("FOM");
                        allinfo.Add("Faculty of Medicine");
                        allinfo.Add("deanfom@lincoln.edu.my");
                        return allinfo;
                    }
                case "D031":
                    {
                        allinfo.Add("FOS");
                        allinfo.Add("Faculty of Science");
                        allinfo.Add("deanfos@lincoln.edu.my");
                        return allinfo;
                    }
                case "D034":
                    {
                        allinfo.Add("FOD");
                        allinfo.Add("Faculty of Dentistry");
                        allinfo.Add("deanfod@lincoln.edu.my");
                        return allinfo;
                    }
                case "D035":
                    {
                        allinfo.Add("FOP");
                        allinfo.Add("Faculty of Pharmacy");
                        allinfo.Add("deanfop@lincoln.edu.my");
                        return allinfo;
                    }
                default:
                    {
                        allinfo.Add("NA");
                        allinfo.Add("NA");
                        allinfo.Add("NA");
                        return allinfo;
                    }
            }
        }

        public static DataTable getrecipients()
        {
            dal = new DataAccess();

            dal.sqlcmdstr = "select * from appl.tblrecipients where del_sts='0' order by name";
            
            return dal.view(Clsutility.dbcon.dbcnn_master.ToString());
        }

        public static DataTable getrecipients(string transid)
        {
            dal = new DataAccess();
            li_param = new List<OleDbParameter>();
            

            dal.sqlcmdstr = "select * from appl.tblrecipients where del_sts='0' and transid=?";

            param = new OleDbParameter("@transid", OleDbType.VarChar, 50);
            param.Value = transid;
            li_param.Add(param);

            dal.lparam = li_param;

            return dal.view(Clsutility.dbcon.dbcnn_master.ToString());


        }

        public static void errorlog(string msg, string rco)
        {
            dal = new DataAccess();
            li_param = new List<OleDbParameter>();
            dal.sqlcmdstr = "system.spinserrorlog";

            param = new OleDbParameter("@error_msg", OleDbType.VarChar, -1);
            param.Value = msg;
            li_param.Add(param);

            param = new OleDbParameter("@rco", OleDbType.VarChar, 50);
            param.Value = rco;
            li_param.Add(param);

            dal.lparam = li_param;

            dal.insertbysp(Clsutility.dbcon.dbcnn_master.ToString());
        }

        public static DataTable acaforms()
        {
            DataTable allforms = new DataTable();
            allforms.Columns.Add("id",typeof(string));

            for (int i = 1; i <= 9; i++)
                allforms.Rows.Add("RD-" + i.ToString());

            return allforms;
        }

        public static string verify_urm(string username,string password,string sys)
        {
            dal = new DataAccess();
            li_param = new List<OleDbParameter>();
            Guid userID = Guid.Empty;
            string originalHash = "";
            string saltValue = "";

            dal.sqlcmdstr = "Select aspnet_Membership.UserId,Password,PasswordSalt From aspnet_Membership inner join ";
            dal.sqlcmdstr += " aspnet_Users on aspnet_Membership.UserID = aspnet_Users.UserID ";
            dal.sqlcmdstr += " Where  LoweredUserName = ? ";

            param = new OleDbParameter("@LoweredUserName", OleDbType.VarChar, 500);
            param.Value = username;
            li_param.Add(param);

            dal.lparam = li_param;

            if(sys=="LUC")
                mdt = dal.view(Clsutility.dbcon.dbsec.ToString());
            else if(sys=="LC")
                mdt = dal.view(Clsutility.dbcon.dbcnn_offshore.ToString());
            
            if (mdt.Rows.Count>0)
            {
                userID = new Guid(mdt.Rows[0][0].ToString());
                originalHash = mdt.Rows[0][1].ToString();
                saltValue = mdt.Rows[0][2].ToString();

                // compare password hashes
                byte[] bIn = Encoding.Unicode.GetBytes(password);
                byte[] bSalt = Convert.FromBase64String(saltValue);
                byte[] bAll = new byte[bSalt.Length + bIn.Length];
                byte[] bRet = null;
                System.Buffer.BlockCopy(bSalt, 0, bAll, 0, bSalt.Length);
                System.Buffer.BlockCopy(bIn, 0, bAll, bSalt.Length, bIn.Length);

                HashAlgorithm s = HashAlgorithm.Create("SHA1");

                bRet = s.ComputeHash(bAll);
                string newHash = Convert.ToBase64String(bRet);

                // check the hash in the datbase matched the new hash we generated
                if (originalHash == newHash)
                    return "success";
                else
                    return "invalid";

            }
            else
                return "invalidu";
        }

        public static List<string> emailids(string rco)
        {
            List<string> emails = new List<string>();
            objuniappl = new bluniapplication();

            if (objuniappl.vwbyapprovalbylocatid(rco).Rows.Count > 0)
            {
                mdt = objuniappl.vwbyapprovalbylocatid(rco);

                // emails.Add(mdt.Rows[0]["Email_ID"].ToString());
               // emails.Add(mdt.Rows[0]["Alternate_Email"].ToString());
                if (mdt.Columns.Contains("E_MAILID"))
                {
                    emails.Add(mdt.Rows[0]["E_MAILID"].ToString());
                    emails.Add(mdt.Rows[0]["E_MAILIDalt"].ToString());
                }
                else
                {
                     emails.Add(mdt.Rows[0]["Email_ID"].ToString());
                     emails.Add(mdt.Rows[0]["Alternate_Email"].ToString());
                }
            }

            else if (objuniappl.vwagentsbylocatid(rco).Rows.Count > 0)
                emails.Add(objuniappl.vwagentsbylocatid(rco).Rows[0]["email"].ToString());

            else if (objuniappl.vwstaffbyid(rco).Rows.Count > 0)
            {
                mdt = objuniappl.vwstaffbyid(rco);

                emails.Add(mdt.Rows[0]["PerInfoOfficialEmail"].ToString());
                emails.Add(mdt.Rows[0]["PerInfoAlternateEmail"].ToString());
            }
            return emails;
        }

        public static DataTable rcodetails(string rco)
        {
            objuniappl = new bluniapplication();
            DataTable tempdt = new DataTable();
            mdt = new DataTable();
            mdt.Columns.Add("assotype", typeof(string));
            mdt.Columns.Add("assoname", typeof(string));
            mdt.Columns.Add("assoinsname", typeof(string));
            mdt.Columns.Add("assoemail", typeof(string));
            mdt.Columns.Add("assocontact", typeof(string));
            mdt.Columns.Add("assocountry", typeof(string));
            mdt.Columns.Add("assoaddress", typeof(string));
            if (objuniappl.vwbyapprovalbylocatid(rco).Rows.Count > 0)
            {
                tempdt = objuniappl.vwbyapprovalbylocatid(rco);
                foreach (DataRow row in tempdt.Rows)
                    mdt.Rows.Add(
                        "Collaborative Organization",
                        row["Institute_Head_Name"].ToString(),
                        row["Name_of_the_Institution"].ToString(),
                        row["Email_ID"].ToString(),
                        row["Mobile_Number"].ToString(),
                        row["countryname"].ToString(),
                        row["Head_Regd_Address"].ToString()
                        );
            }

            else if (objuniappl.vwagentsbylocatid(rco).Rows.Count > 0)
            {
                tempdt = objuniappl.vwagentsbylocatid(rco);
                foreach (DataRow row in tempdt.Rows)
                    mdt.Rows.Add(
                        "LUC Agent",
                        row["educationconsultant"].ToString(),
                        row["companyname"].ToString(),
                        row["email"].ToString(),
                        row["contact1"].ToString(),
                        row["countryname"].ToString(),
                        row["address1"].ToString()
                        );
            }

            else if (objuniappl.vwstaffbyid(rco).Rows.Count > 0)
            {
                tempdt = objuniappl.vwstaffbyid(rco);
                foreach (DataRow row in tempdt.Rows)
                    mdt.Rows.Add(
                        "LUC Staff",
                        row["name"].ToString(),
                        "Lincoln University College",
                        row["perinfoofficialemail"].ToString(),
                        row["pmobilenumber"].ToString(),
                        row["countryname"].ToString(),
                        row["PermanentAddress"].ToString()
                        );
            }
            else
            {
                mdt.Rows.Add(
                        "Information Not Available",
                        "Information Not Available",
                        "Information Not Available",
                        "Information Not Available",
                        "Information Not Available",
                        "Information Not Available",
                         "Information Not Available"
                        );
            }

            return mdt;
        }

        public static string NumberToWords(int number)
        {
            if (number == 0)
                return "zero";

            if (number < 0)
                return "minus " + NumberToWords(Math.Abs(number));

            string words = "";

            if ((number / 1000000) > 0)
            {
                words += NumberToWords(number / 1000000) + " million ";
                number %= 1000000;
            }

            if ((number / 1000) > 0)
            {
                words += NumberToWords(number / 1000) + " thousand ";
                number %= 1000;
            }

            if ((number / 100) > 0)
            {
                words += NumberToWords(number / 100) + " hundred ";
                number %= 100;
            }

            if (number > 0)
            {
                if (words != "")
                    words += "and ";

                var unitsMap = new[] { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen" };
                var tensMap = new[] { "zero", "ten", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety" };

                if (number < 20)
                    words += unitsMap[number];
                else
                {
                    words += tensMap[number / 10];
                    if ((number % 10) > 0)
                        words += "-" + unitsMap[number % 10];
                }
            }

            return words;
        }

    }
}
